[
  {
    "id": "f2b0c1de9b1a4aac",
    "type": "tab",
    "label": "Fetch Group and Members",
    "disabled": false,
    "info": "Inject a group CN, fetch the group's member list, and optionally look up each member DN for details."
  },
  {
    "id": "c2f0a2b3c4d5e6f8",
    "type": "cappern-ldap-config",
    "name": "Example LDAP",
    "host": "ldap.example.com",
    "port": 389,
    "protocol": "ldap",
    "tlsInsecure": false,
    "base": "dc=example,dc=com",
    "credentials": {
      "bindDN": "",
      "bindCredentials": "",
      "ca": ""
    }
  },
  {
    "id": "2011223344556677",
    "type": "inject",
    "z": "f2b0c1de9b1a4aac",
    "name": "Group cn",
    "props": [
      { "p": "payload" }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "engineering",
    "payloadType": "str",
    "x": 150,
    "y": 120,
    "wires": [["3011223344556677"]]
  },
  {
    "id": "3011223344556677",
    "type": "function",
    "z": "f2b0c1de9b1a4aac",
    "name": "Build group filter",
    "func": "const cn = String(msg.payload || '').trim();\nmsg.base = msg.base || 'ou=groups,dc=example,dc=com';\nmsg.filter = `(cn=${cn})`;\nmsg.scope = 'sub';\nmsg.attributes = ['cn','member','uniqueMember','memberUid'];\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 120,
    "wires": [["4011223344556677"]]
  },
  {
    "id": "4011223344556677",
    "type": "cappern-ldap",
    "z": "f2b0c1de9b1a4aac",
    "name": "Get group",
    "ldap": "c2f0a2b3c4d5e6f8",
    "base": "",
    "filter": "(objectClass=*)",
    "scope": "sub",
    "attributes": "",
    "x": 560,
    "y": 120,
    "wires": [["5011223344556677","9011223344556677"]]
  },
  {
    "id": "5011223344556677",
    "type": "function",
    "z": "f2b0c1de9b1a4aac",
    "name": "Extract member list",
    "func": "const entry = (Array.isArray(msg.payload) && msg.payload[0]) || {};\nconst cn = Array.isArray(entry.cn) ? entry.cn[0] : entry.cn || (msg.filter||'').replace(/^.*cn=([^)]*).*/, '$1');\nlet members = [];\nif (Array.isArray(entry.member)) members = entry.member;\nelse if (Array.isArray(entry.uniqueMember)) members = entry.uniqueMember;\nelse if (Array.isArray(entry.memberUid)) members = entry.memberUid.map(u => `uid=${u},ou=people,dc=example,dc=com`);\nmsg.members = members;\nmsg.payload = { group: cn, members };\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 780,
    "y": 80,
    "wires": [["6011223344556677"]]
  },
  {
    "id": "6011223344556677",
    "type": "debug",
    "z": "f2b0c1de9b1a4aac",
    "name": "Group + member DNs",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1010,
    "y": 80,
    "wires": []
  },
  {
    "id": "9011223344556677",
    "type": "function",
    "z": "f2b0c1de9b1a4aac",
    "name": "Prepare member lookups",
    "func": "// Take the group result and fan-out to lookup each member DN (if any)\nconst entry = (Array.isArray(msg.payload) && msg.payload[0]) || {};\nlet members = [];\nif (Array.isArray(entry.member)) members = entry.member;\nelse if (Array.isArray(entry.uniqueMember)) members = entry.uniqueMember;\nelse if (Array.isArray(entry.memberUid)) members = entry.memberUid.map(u => `uid=${u},ou=people,dc=example,dc=com`);\nmsg.payload = members;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 790,
    "y": 160,
    "wires": [["a011223344556677"]]
  },
  {
    "id": "a011223344556677",
    "type": "split",
    "z": "f2b0c1de9b1a4aac",
    "name": "Split members",
    "splt": "\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 1000,
    "y": 160,
    "wires": [["b011223344556677"]]
  },
  {
    "id": "b011223344556677",
    "type": "function",
    "z": "f2b0c1de9b1a4aac",
    "name": "Lookup DN (base scope)",
    "func": "const dn = String(msg.payload || '').trim();\nmsg.base = dn;\nmsg.scope = 'base';\nmsg.filter = '(objectClass=*)';\nmsg.attributes = ['dn','cn','uid','mail','objectClass'];\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1240,
    "y": 160,
    "wires": [["b111223344556677"]]
  },
  {
    "id": "b111223344556677",
    "type": "cappern-ldap",
    "z": "f2b0c1de9b1a4aac",
    "name": "Get member entry",
    "ldap": "c2f0a2b3c4d5e6f8",
    "base": "",
    "filter": "(objectClass=*)",
    "scope": "base",
    "attributes": "",
    "x": 1450,
    "y": 160,
    "wires": [["b211223344556677"]]
  },
  {
    "id": "b211223344556677",
    "type": "join",
    "z": "f2b0c1de9b1a4aac",
    "name": "Aggregate entries",
    "mode": "auto",
    "build": "array",
    "property": "payload",
    "propertyType": "msg",
    "key": "",
    "joiner": "",
    "joinerType": "auto",
    "accumulate": false,
    "timeout": "",
    "count": "",
    "reduceRight": false,
    "reduceExp": "",
    "reduceInit": "",
    "reduceInitType": "num",
    "reduceFixup": "",
    "x": 1650,
    "y": 160,
    "wires": [["b311223344556677"]]
  },
  {
    "id": "b311223344556677",
    "type": "debug",
    "z": "f2b0c1de9b1a4aac",
    "name": "Member entries",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1840,
    "y": 160,
    "wires": []
  }
]
